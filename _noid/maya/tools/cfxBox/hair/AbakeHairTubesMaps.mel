//=============================================================================
//
//	Bake HairTubes Maps	- Script that gets selected hairTUBES densityRatio, cutLength, borders and bakes them into EMITTER's UVs
//							- Computes the Ratio between a TUBE's base and it's largest section
//							- Remaps the Ratio between a min/max range
//							- Match each TUBE with an EMITTER
//							- Bakes the Ratio into vertex color of each EMITTER and a map (based on EMITTER's UVs)
//							- Bakes also a Cut map, Border map and RandomColor map
//
//							>> See script "bl_createHairEmitter.mel" for EMITTER's creation
//
//-----------------------------------------------------------------------------
//
// Version  :    2.2
//
// Created  :    04/08/2010
// Modified :    22/09/2010
//
// Creator 	:    Ali
// Contact 	:    chibi_ali@hotmail.com
//
//-----------------------------------------------------------------------------
//
// Use		:	- use "AbakeHairTubesMaps" to open the UI.
//
//-----------------------------------------------------------------------------------
//===================================================================================
//***********************************************************************************







//***********************************************************************************
//===================================================================================
//--------------------------------     Local Procs    -------------------------------
//===================================================================================
//***********************************************************************************


//-------------------------------------------------------------------------
//
// Procedure that gets hairTUBES densityRatio
//		<< takes for arg a list of Nurbs TUBES
//		<< takes for arg a new minimum value (where lowest ratio will be remapped)
//		<< takes for arg a new maximum value (where highest ratio will be remapped)
//		<< takes for arg a boolean to activate verbosity
//
//		>> returns the list of all computed ratios
//
//-------------------------------------------------------------------------

proc float[] bHTM_ratioIsoULen(string $sel[], float $minRange, float $maxRange, int $check)
{
	string $curveList[];
	float  $curvArcLenU0;
	float  $curvArcLen;
	float  $curvLongestLen;
	float  $curvRatio;
	float  $curvRatioList[];
	float  $maxRatio;
	float  $minRatio;
	float  $curNewRatio;
	float  $ratioList[];
	
	
	// ------------------------------------------------------------
	// -- Get a ratio btw the longest U isoparm and the first U isoparm for each Nurbs TUBE
	//
	for ($curSel in $sel)
	{
		// Add all U isoparms in $curveList
		clear $curveList;
		selectVisibleIsoparms {$curSel} $curveList 0 0 1;
		
		// Get the length of the first U isoparm
		$curvArcLenU0 = `arclen -ch 0 $curveList[0]`;
		
		// Get the length of the longest U isoparm
		$curvLongestLen = 0;
		
		for ($i=0; $i<size($curveList); $i++)
		{
			$curvArcLen = `arclen -ch 0 $curveList[$i]`;
			$curvLongestLen = `max $curvLongestLen $curvArcLen`;
		}
		
		// Get the ratio
		$curvRatio = $curvLongestLen / $curvArcLenU0;
		$curvRatioList[size($curvRatioList)] = $curvRatio;
		
		// Verbose depending on $check option
		if ($check)
		{
			print ("\/\/ current object : " + $curSel + "\n");
			print ("\/\/ first isoU length : " + $curvArcLenU0 + " | longest isoU : " + $curvLongestLen +"\n");
			print ("\/\/ isoU ratio : " + $curvRatio +"\n");
			print ("\/\/ -----------------------------------------\n");
		}
	}
	
	
	// ------------------------------------------------------------
	// -- Get the lowest and the highest Ratios of the list
	//
	$minRatio = $curvRatioList[0];
	$maxRatio = $curvRatioList[0];
	
	for ($curRatio in $curvRatioList)
	{
		$maxRatio = `max $maxRatio $curRatio`;
		$minRatio = `min $minRatio $curRatio`;
	}
	
	
	// ------------------------------------------------------------
	// -- Verbose depending on $check option
	//
	if ($check)
	{
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ min Ratio : " + $minRatio + " | max Ratio : " + $maxRatio +"\n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ -----------------------------------------\n");
	}
	
	if ($minRatio == $maxRatio)
	{
		warning ("Min and Max Ratios are EQUAL ! The generated Density Map will be in NEUTRAL GREY !");
	}
	
	
	// ------------------------------------------------------------
	// -- Remap lowestRatio >> $minRange and highestRatio >> $maxRange
	//    and get each Ratio's new value
	//
	for ($curRatio in $curvRatioList)
	{
		if ($minRatio == $maxRatio)
		{
			$curNewRatio = 0.5;
		}
		else
		{
			// Do the remap between 0 and 1
			$curNewRatio = ($curRatio-$minRatio)/($maxRatio-$minRatio);
			
			// Now do the remap between $minRange and $maxRange
			$curNewRatio = $minRange + ( $curNewRatio * ($maxRange-$minRange) );
		}
		
		// Verbose depending on $check option
		if ($check)
		{
			print ("\/\/ Current Ratio : " + $curRatio + " | Remapped to : " + $curNewRatio +"\n");
		}
		
		$ratioList[size($ratioList)] = $curNewRatio;
	}
	
	
	// ------------------------------------------------------------
	// -- Return the list of all computed ratios
	//
	return $ratioList;
}



//-------------------------------------------------------------------------
//
// Procedure that creates a proxy and prepares it for CUT map bake
//		<< takes for arg the poly EMITTER
//
//		>> returns the created Proxy EMITTER + the created Set containing all center vertices
//
//-------------------------------------------------------------------------

proc string[] bHTM_prepEmitterForCUT(string $emitter)
{
	string $emitterPXY;
	string $centerVtxSet;
	string $emitterPXY2[];
	string $emitter2[];
	string $result[2];
	
	
	// ------------------------------------------------------------
	// -- Create a proxy of the EMITTER
	//
	$emitterPXY = `createNode transform -n ($emitter + "_CUT")`;
	createNode mesh -p $emitterPXY -n ($emitterPXY + "_Shape");
	sets -e -forceElement initialShadingGroup $emitterPXY;
	connectAttr -f ($emitter + ".outMesh") ($emitterPXY + ".inMesh");
	
	
	// ------------------------------------------------------------
	// -- Delete internal edges
	//
	select -r ($emitterPXY + ".e[*]");
	polySelectConstraint -type 0x8000 -pp 2; // remove border edges from selection
	delete;
	
	
	// ------------------------------------------------------------
	// -- Extrude faces to center and keep all center vtx
	//
	select -r ($emitterPXY + ".f[*]");
	polyExtrudeFacet -d 3 -ls 0 0 0;
	select -r `polyListComponentConversion -ff -tv`;
	polyMergeVertex;
	
	// Create a Set containing all center vertices
	$centerVtxSet = `sets -n "tmpCenterVtxSET"`;
	
	
	// ------------------------------------------------------------
	// -- Delete the initial "big faces" and keep only the extruded ones
	//
	select -r `polyListComponentConversion -fv -tf`;
	polySelectConstraint -type 0x0008 -pp 1;
	polySelectConstraint -type 0x0008 -pp 1;
	select -toggle ($emitterPXY + ".f[*]");
	delete;
	delete -ch $emitterPXY;
	
	
	// ------------------------------------------------------------
	// -- Separate the emitters for better UV transfert btw initial emitter and proxy
	//
	$emitter2 = `duplicate $emitter`;
	$emitter2 = `polySeparate -ch 0 $emitter2[0]`;
	select -cl;
	$emitterPXY2 = `duplicate $emitterPXY`;
	$emitterPXY2 = `polySeparate -ch 0 $emitterPXY2[0]`;
	select -cl;
	
	if (`size($emitter2)` != `size($emitterPXY2)`)
	{
		error "The poly Emitter has overlapping surfaces/points !! Please check and clean it !";
	}
	
	for ($i=0; $i<size($emitter2); $i++)
	{
		transferAttributes -pos 0 -nml 0 -uvs 2 -col 0 -spa 0 -sus "map1" -tus "map1" -sm 3 -fuv 0 -clb 1 $emitter2[$i] $emitterPXY2[$i];
	}
	
	$emitterPXY2 = `polyUnite -ch 0 $emitterPXY2`;
	
	
	// ------------------------------------------------------------
	// -- Transfert the UVs and Smooth the proxy
	//
	transferAttributes -pos 0 -nml 0 -uvs 2 -col 0 -spa 0 -sus "map1" -tus "map1" -sm 3 -fuv 0 -clb 1 $emitterPXY2[0] $emitterPXY;
	polySmooth -mth 0 -dv 2 -c 1 -kb 1 -ksb 1 -khe 0 -kt 1 -kmb 1 -suv 1 -peh 0 -sl 1 -dpe 1 -ps 0.1 -ro 1 -ch 1 $emitterPXY;
	delete -ch $emitterPXY;
	delete $emitterPXY2;
	delete `listRelatives -p $emitter2[0]`;
	
	
	// ------------------------------------------------------------
	// -- Paint custom weights with the vertex Paint Tool
	//
	polyColorPerVertex -colorRGB 1 1 1 -colorDisplayOption -rpt 2 ($emitterPXY + ".vtx[*]");
	
	select -r ($emitterPXY + ".vtx[*]");
	polySelectBorderShell 1; // select border edge
	polySelectConstraint -type 0x0001 -pp 1;
	polySelectConstraint -type 0x0001 -pp 1;
	polySelectConstraint -type 0x0001 -pp 1;
	polySelectConstraint -type 0x0001 -pp 1;
	polySelectConstraint -type 0x0001 -pp 1;
	
	polyColorPerVertex -colorRGB 0 0 0 -colorDisplayOption -rpt 2;
	
	
	// ------------------------------------------------------------
	// -- Returns the created proxy EMITTER + the created Set
	//
	$result[0] = $emitterPXY;
	$result[1] = $centerVtxSet;
	return $result;
}



//-------------------------------------------------------------------------
//
// Procedure that creates a proxy and prepares it for BORDER map bake
//		<< takes for arg the poly EMITTER
//		<< takes for arg a float that sets the border's scale value
//
//		>> returns the created Proxy EMITTER
//
//-------------------------------------------------------------------------

proc string bHTM_prepEmitterForBORDER(string $emitter, float $borderScale)
{
	string $emitterPXY;
	string $emitterPXY2[];
	string $emitter2[];
	
	
	// ------------------------------------------------------------
	// -- Create a proxy of the EMITTER
	//
	$emitterPXY = `createNode transform -n ($emitter + "_BORDER")`;
	createNode mesh -p $emitterPXY -n ($emitterPXY + "_Shape");
	sets -e -forceElement initialShadingGroup $emitterPXY;
	connectAttr -f ($emitter + ".outMesh") ($emitterPXY + ".inMesh");
	
	
	// ------------------------------------------------------------
	// -- Delete internal edges
	//
	select -r ($emitterPXY + ".e[*]");
	polySelectConstraint -type 0x8000 -pp 2; // remove border edges from selection
	delete;
	
	
	// ------------------------------------------------------------
	// -- Extrude faces towards center depending on $borderScale
	//
	select -r ($emitterPXY + ".f[*]");
	polyExtrudeFacet -ls $borderScale $borderScale $borderScale;
	select -r `polyListComponentConversion -ff -tv`;
	
	
	// ------------------------------------------------------------
	// -- Delete the initial "big faces" and keep only the extruded ones
	//
	select -r `polyListComponentConversion -fv -tf`;
	select -toggle ($emitterPXY + ".f[*]");
	delete;
	
	
	// ------------------------------------------------------------
	// -- Delete the faces at center
	//
	select -r ($emitterPXY + ".f[*]");
	polySelectBorderShell 1; // select border edge
	select -toggle ($emitterPXY + ".f[*]");
	delete;
	delete -ch $emitterPXY;
	
	
	// ------------------------------------------------------------
	// -- Separate the emitters for better UV transfert btw initial emitter and proxy
	//
	$emitter2 = `duplicate $emitter`;
	$emitter2 = `polySeparate -ch 0 $emitter2[0]`;
	select -cl;
	$emitterPXY2 = `duplicate $emitterPXY`;
	$emitterPXY2 = `polySeparate -ch 0 $emitterPXY2[0]`;
	select -cl;
	
	if (`size($emitter2)` != `size($emitterPXY2)`)
	{
		error "The poly Emitter has overlapping surfaces/points !! Please check and clean it !";
	}
	
	for ($i=0; $i<size($emitter2); $i++)
	{
		transferAttributes -pos 0 -nml 0 -uvs 2 -col 0 -spa 0 -sus "map1" -tus "map1" -sm 3 -fuv 0 -clb 1 $emitter2[$i] $emitterPXY2[$i];
	}
	
	$emitterPXY2 = `polyUnite -ch 0 $emitterPXY2`;
	
	
	// ------------------------------------------------------------
	// -- Transfert UVs and paint custom weights
	//
	transferAttributes -pos 0 -nml 0 -uvs 2 -col 0 -spa 0 -sus "map1" -tus "map1" -sm 3 -fuv 0 -clb 1 $emitterPXY2[0] $emitterPXY;
	delete -ch $emitterPXY;
	delete $emitterPXY2;
	delete `listRelatives -p $emitter2[0]`;
	
	polyColorPerVertex -colorRGB 1 1 1 -colorDisplayOption -rpt 2 ($emitterPXY + ".vtx[*]");
	
	
	// ------------------------------------------------------------
	// -- Returns the created proxy EMITTER
	//
	return $emitterPXY;
}



//-------------------------------------------------------------------------
//
// Procedure that assigns a RANDOM COLOR to each shell of the EMITTER
//		<< takes for arg the poly EMITTER
//
//-------------------------------------------------------------------------

proc bHTM_prepEmitterForRANDCOL(string $emitter)
{
	string $emitterPXY;
	string $emitterSepar[];
	string $curEmitter;
	float  $colIncrement;
	float  $curHue;
	float  $curColor[3];
	string $tempArray[];
	
	
	// ------------------------------------------------------------
	// -- Create a proxy of the EMITTER and separate it
	//
	$emitterPXY = `createNode transform -n ($emitter + "_RANDCOL")`;
	createNode mesh -p $emitterPXY -n ($emitterPXY + "_Shape");
	sets -e -forceElement initialShadingGroup $emitterPXY;
	connectAttr -f ($emitter + ".outMesh") ($emitterPXY + ".inMesh");
	
	$emitterSepar = `polySeparate -ch 0 $emitterPXY`;
	
	
	// ------------------------------------------------------------
	// -- Assign a unique color per emitter shell
	//
	$numOfEmit = size($emitterSepar);
	$colIncrement = (1.0 / $numOfEmit);
	$curHue = 0;
	
	for ($curEmitter in $emitterSepar)
	{
		$curHue = $curHue + $colIncrement;
		$curColor = `hsv_to_rgb <<$curHue,1,1>>`;
		
		polyColorPerVertex -colorRGB $curColor[0] $curColor[1] $curColor[2] -colorDisplayOption -rpt 2 ($curEmitter + ".vtx[*]");
	}
	
	
	// ------------------------------------------------------------
	// -- Re-Combine the separated PXY EMITTER
	//
	$tempArray = `polyUnite -ch 0 $emitterSepar`;
	$emitterPXY = $tempArray[0];
	
	
	// ------------------------------------------------------------
	// -- Transfert the vtxColors to the EMITTER
	//
	transferAttributes -pos 0 -nml 0 -uvs 0 -col 2 -sampleSpace 0 -searchMethod 3 -colorBorders 1 $emitterPXY $emitter;
	delete -ch $emitter;
	delete $emitterPXY;
}



//***********************************************************************************
//===================================================================================
//--------------------------------     Main Procs    --------------------------------
//===================================================================================
//***********************************************************************************


//-------------------------------------------------------------------------
//
// Procedure that gets hairTUBES densityRatio, cutLength, borders and bakes them into EMITTER's UVs
//		<< takes for arg a list of Nurbs TUBES
//		<< takes for arg the poly EMITTER on which Density/CutLength/Border/RandomColor maps will be baked
//		<< takes for arg a new minimum value (where lowest ratio will be remapped)
//		<< takes for arg a new maximum value (where highest ratio will be remapped)
//		<< takes for arg a value that sets the border's thickness
//		<< takes for arg the path and file name of the texture to be baked
//		<< takes for arg the texture's resolution
//		<< takes for arg a boolean to activate verbosity
//
//-------------------------------------------------------------------------

global proc A_bakeHairTubesMaps(string $sel[], string $emitter, float $minRange, float $maxRange, float $borderScale, string $filePath, int $resol, int $check)
{
	string $tempArray[];
	string $texWinName[];
	float  $ratioList[];
	
	string $initSelL;
	string $initSel[];
	string $emitterPXY;
	string $emitterOrder[];
	string $newEmitterOrder[];
	string $initSelMatch;
	string $emitterMatch;
	string $clrVtxCtx;
	string $prepCutResult[];
	string $emitterCut;
	string $centerVtxSet;
	string $emitterBord;
	string $hairSystem[];
	
	
	// ------------------------------------------------------------
	// -- Get all nurbsSurfaces from selection or hierachy
	//
	$sel = `filterExpand -fullPath false -sm 10 $sel`;
	$sel = `ls -visible $sel`;
	
    if (`size($sel)` < 2)
	{
        error "Please select at least 2 visible NURBS surfaces !";
	}
	
	
	// ------------------------------------------------------------
	// -- Check that $emitter is a poly and has a "combineOrder" extraAttr
	//
	if ($emitter == "")
	{
		error ("Please give an \"Emitter\" !");
	}
	
	$tempArray = `filterExpand -fullPath false -sm 12 $emitter`;
	
	if (!`size($tempArray)`)
	{
		error ("The \"Emitter\" must be a POLYGONAL object !");
	}
	
	$emitter = $tempArray[0]; // get the transform even if $emitter was a shape
	
	if (!`attributeExists "combineOrder" $emitter`)
	{
		error ("The \"Emitter\" must have a \"combineOrder\" extra attribute !");
	}
	
	if ($filePath == "")
	{
		error ("Please give a filePath !");
	}
	
	
	// ------------------------------------------------------------
	// -- Check min and max values
	//
	if ($maxRange <= $minRange) {
		error ("Max Range must be greater than Min Range !");
	}
	
	if ($minRange < 0) {
		warning ("Min Range must be equal or greater than 0 ! Setting it to 0. ");
		$minRange = 0;
	}
	if ($minRange >= 1) {
		warning ("Min Range must be lower than 1 ! Setting it to 0.9 ");
		$minRange = 0.9;
	}
	
	if ($maxRange <= 0) {
		warning ("Max Range must be greater than 0 ! Setting it to 0.1 ");
		$maxRange = 0.1;
	}
	if ($maxRange > 1) {
		warning ("Max Range must be equal or lower than 1 ! Setting it to 1. ");
		$maxRange = 1;
	}
	
	
	// ------------------------------------------------------------
	// -- Check Border Scale values
	//
	if ($borderScale == 0) {
		error ("Please give a value for Border scale (between 0.1 and 0.9) !");
	}
	else if ($borderScale <= 0) {
		warning ("Border Scale must be greater than 0 ! Setting it to 0.1 ");
		$borderScale = 0.1;
	}
	else if ($borderScale >= 1) {
		warning ("Border Scale must be lower than 1 ! Setting it to 0.9 ");
		$borderScale = 0.9;
	}
	
	
	// ------------------------------------------------------------
	// -- Close UVTexture Editor if open (really really faster!)
	//
	$texWinName = `getPanel -sty polyTexturePlacementPanel`;
	// disable it if it's in embedded in a layout (like perspView)
	removeTextureWindow $texWinName[0];
	
	// close it if it's a separate window
	if ( `window -exists polyTexturePlacementPanel1Window` ) {
		deleteUI -window polyTexturePlacementPanel1Window;
	}
	
	
	// ------------------------------------------------------------
	// -- Get the list of all computed ratios
	//
	if ($check)
	{
		print ("\/\/ \n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ Compute Nurbs TUBES' Density ratios. \n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ \n");
	}
	
	$ratioList = bHTM_ratioIsoULen($sel, $minRange, $maxRange, $check);
	
	
	// ------------------------------------------------------------
	// -- Get the list and order of the inital TUBES' selection (the tubes that generated the emitter)
	//
	$initSelL = `getAttr ($emitter + ".combineOrder")`;
	$initSel  = stringToStringArray($initSelL, " ");
	
	
	// ------------------------------------------------------------
	// -- Create a proxy of the EMITTER and separate it
	//
	$emitterPXY = `createNode transform -n ($emitter + "_PXY")`;
	createNode mesh -p $emitterPXY -n ($emitterPXY + "_Shape");
	sets -e -forceElement initialShadingGroup $emitterPXY;
	connectAttr -f ($emitter + ".outMesh") ($emitterPXY + ".inMesh");
	
	$emitterOrder = `polySeparate -ch 0 $emitterPXY`;
	
	
	// ------------------------------------------------------------
	// -- Match each Ratio with an emmiter (because ratios order and emitters comb order can be different)
	//    >> ratios order == current tubes selection order ($ratioList == $sel)
	//    >> emitters order == tubes order at emitter's creation ($emitterOrder == $initSel)
	//
	for ($i=0; $i<size($sel); $i++)
	{
		$initSelMatch = "";
		$emitterMatch = "";
		
		// List all initial tubes order and match with the current selected tube
		for ($j=0; $j<size($initSel); $j++)
		{
			if (`gmatch $sel[$i] $initSel[$j]`) // the "initSel" matching the current selection
			{
				$initSelMatch = $initSel[$j];
				$emitterMatch = $emitterOrder[$j]; // the emmiter matching this "initSel"
				break;
			}
		}
		
		// Verbose depending on $check option
		if ($check)
		{
			print ("\/\/ -----------------------------------------\n");
			print ("\/\/ Current Sel.  : " + $sel[$i] + " | Ratio : " + $ratioList[$i] +"\n");
			print ("\/\/ Matching Tube : " + $initSelMatch + " | Emitter : " + $emitterMatch +"\n");
		}
		
		$newEmitterOrder[size($newEmitterOrder)] = $emitterMatch;
	}
	
	
	// ------------------------------------------------------------
	// -- Bake the values into the vertex color of the EMITTER
	//
	if ($check)
	{
		print ("\/\/ \n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ Start of Density Map bake. \n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ \n");
	}
	
	$newEmitterOrder = stringArrayRemoveDuplicates($newEmitterOrder);
	
	for ($i=0; $i<size($sel); $i++)
	{
		polyColorPerVertex -colorRGB $ratioList[$i] $ratioList[$i] $ratioList[$i] -colorDisplayOption -rpt 2 ($newEmitterOrder[$i] + ".vtx[*]");
	}
	
	// Re-Combine the separated PXY EMITTER and transfert vtxColors to the EMITTER
	$tempArray = `polyUnite -ch 0 $emitterOrder`;
	$emitterPXY = $tempArray[0];
	
	transferAttributes -pos 0 -nml 0 -uvs 0 -col 2 -sampleSpace 0 -searchMethod 3 -colorBorders 1 $emitterPXY $emitter;
	delete -ch $emitter;
	delete $emitterPXY;
	
	
	// ------------------------------------------------------------
	// -- Bakes the same values in a texture
	//
	// Poly color per vertex Paint Tool
	$clrVtxCtx = "artAttrColorPerVertexContext";
	
	// Create the context if it doesn't already exists
	if (!`contextInfo -ex $clrVtxCtx`)
	{
		//artAttrTool -q; // query the list of built-in tools
		
		// create a new context via artAttrCtx and specify the tool name via the -whichTool flag
		artAttrPaintVertexCtx -whichTool "colorPerVertex" -i1 "paintVertexColour.png" $clrVtxCtx;
	}
	
	select -r $emitter;
	setToolTo $clrVtxCtx;
	
	// Set the export options for the current tool type (colorPerVertex)
	artAttrPaintVertexCtx -e -efm "rgb" -eft "IFF" -fsx $resol -fsy $resol `currentCtx`;
	
	// Export the map (the options are set before or else they won't be taken into account !!)
	artAttrPaintVertexCtx -e -exportfilesave ($filePath+ "/" +$emitter+ "_DEN") `currentCtx`;
	
	setToolTo "selectSuperContext";
	
	
	// ------------------------------------------------------------
	// -- Create a 2cd proxy of the EMITTER and prepare it for Cut map bake
	//
	if ($check)
	{
		print ("\/\/ \n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ Start of Cut Lenght Map bake. \n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ \n");
	}
	
	$prepCutResult = bHTM_prepEmitterForCUT($emitter);
	$emitterCut    = $prepCutResult[0];
	$centerVtxSet  = $prepCutResult[1];
	
	
	// ------------------------------------------------------------
	// -- Bake the Cut Lenght Map
	//
	// Select all vtx but borders and center
	select -r ($emitterCut + ".vtx[*]");
	polySelectBorderShell 1; // select border edge
	select -add $centerVtxSet;
	select -toggle ($emitterCut + ".vtx[*]");
	
	setToolTo $clrVtxCtx;
	
	// Smooth the values to have a nice gradient
	artAttrPaintVertexCtx -e -sao "smooth" -op 1 -val 10 `currentCtx`;
	for ($i=0; $i<30; $i++ ) {
    	artAttrPaintVertexCtx -e -clr `currentCtx`;
    }
	
	// Set the export options for the current tool type (colorPerVertex)
	artAttrPaintVertexCtx -e -efm "rgb" -eft "IFF" -fsx $resol -fsy $resol `currentCtx`;
	
	// Export the map (the options are set before or else they won't be taken into account !!)
	artAttrPaintVertexCtx -e -exportfilesave ($filePath+ "/" +$emitter+ "_CUT") `currentCtx`;
	
	setToolTo "selectSuperContext";
	
	delete $emitterCut;
	
	
	// ------------------------------------------------------------
	// -- Create a 3th proxy of the EMITTER and prepare it for Border map bake
	//
	if ($check)
	{
		print ("\/\/ \n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ Start of Border Map bake. \n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ \n");
	}
	
	$emitterBord = bHTM_prepEmitterForBORDER($emitter, $borderScale);
	
	
	// ------------------------------------------------------------
	// -- Bake the Border Map
	//
	select -r $emitterBord;
	setToolTo $clrVtxCtx;
	
	// Set the export options for the current tool type (colorPerVertex)
	artAttrPaintVertexCtx -e -efm "rgb" -eft "IFF" -fsx $resol -fsy $resol `currentCtx`;
	
	// Export the map (the options are set before or else they won't be taken into account !!)
	artAttrPaintVertexCtx -e -exportfilesave ($filePath+ "/" +$emitter+ "_BOR") `currentCtx`;
	
	setToolTo "selectSuperContext";
	
	delete $emitterBord;
	
	
	// ------------------------------------------------------------
	// -- Assigns a RANDOM COLOR to each shell of the EMITTER
	//
	if ($check)
	{
		print ("\/\/ \n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ Start of Random Color Map bake. \n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ \n");
	}
	
	bHTM_prepEmitterForRANDCOL($emitter);
	
	
	// ------------------------------------------------------------
	// -- Bake the Random Color Map
	//
	select -r $emitter;
	setToolTo $clrVtxCtx;
	
	// Set the export options for the current tool type (colorPerVertex)
	artAttrPaintVertexCtx -e -efm "rgb" -eft "IFF" -fsx $resol -fsy $resol `currentCtx`;
	
	// Export the map (the options are set before or else they won't be taken into account !!)
	artAttrPaintVertexCtx -e -exportfilesave ($filePath+ "/" +$emitter+ "_COL") `currentCtx`;
	
	setToolTo "selectSuperContext";
	
	
	// ------------------------------------------------------------
	// -- Sets the maps into the EMITTER's Hair System
	//
	if ($check)
	{
		print ("\/\/ \n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ -----------------------------------------\n");
		print ("\/\/ Set the Maps into the Hair System. \n");
		print ("\/\/ -----------------------------------------\n");
	}
	
	$hairSystem = `ls -type "mgHairLocator" (listHistory ("-f", true, $emitter))`;
	
	if (!size($hairSystem))
	{
		warning ("No Hair System found on current Emitter ! Skipping...");
	}
	else
	{
		setAttr -type "string" ($hairSystem[0] + ".rhDensityMap") ($filePath+ "/" +$emitter+ "_DEN.iff");
		setAttr -type "string" ($hairSystem[0] + ".rhLengthMap") ($filePath+ "/" +$emitter+ "_CUT.iff");
		setAttr -type "string" ($hairSystem[0] + ".rhRootMap") ($filePath+ "/" +$emitter+ "_COL.iff");
		setAttr -type "string" ($hairSystem[0] + ".rhTipMap") ($filePath+ "/" +$emitter+ "_COL.iff");
		
		if ($check)
		{
			print ("\/\/ \n");
			print ("\/\/ Scipt ended Successfully. Please open ScriptEditor to see details. \n");
		}
	}
}



//***********************************************************************************
//===================================================================================
//--------------------------------     Call Procs    --------------------------------
//===================================================================================
//***********************************************************************************



//-------------------------------------------------------------------------
// Procedure that gets the selected mesh
//
//-------------------------------------------------------------------------
//
global proc bHTD_getRefMesh()
{
	string $window 		= "win_AbakeHairTubesMaps";
	string $b_refMesh	= ($window+"_refMesh");
	string $sel[];
	
	
	$sel = `filterExpand -fullPath false -sm 12 (ls ("-sl"))`;
	
    if (!`size($sel)`)
	{
        error "Please select one POLYGONAL Object !";
	}
	
	textFieldButtonGrp -e -tx $sel[0] $b_refMesh;
}



//-------------------------------------------------------------------------
// Procedure that GETS the files' path
//
//-------------------------------------------------------------------------
//
global proc bHTD_getFilePath()
{
	string $window 			= "win_AbakeHairTubesMaps";
	string $b_filePath 	= ($window+"_filePath");
	string $filename[];
	
	
	string $filename[] = `fileDialog2 -fileMode 3 -dialogStyle 2`;
	
	textFieldButtonGrp -e -tx $filename $b_filePath;
}



//-------------------------------------------------------------------------
// Procedure that LAUNCHES the script when hitting "CREATE" button
//
//-------------------------------------------------------------------------
//
global proc bHTD_apply()
{
	string $window		= "win_AbakeHairTubesMaps";
	string $b_refMesh	= ($window+"_refMesh");
	string $b_minR		= ($window+"_minR");
	string $b_maxR		= ($window+"_maxR");
	string $b_bordS		= ($window+"_bordS");
	string $b_filePath = ($window+"_filePath");
	string $b_resol		= ($window+"_resol");
	string $c_verb		= ($window+"_verb");
	
	string $refMesh 	= `textFieldButtonGrp -q -tx $b_refMesh`;
	float  $minR	 	= `floatFieldGrp -q -v1 $b_minR`;
	float  $maxR	 	= `floatFieldGrp -q -v1 $b_maxR`;
	float  $borderScl  = `floatFieldGrp -q -v1 $b_bordS`;
	string $filePath	= `textFieldButtonGrp -q -tx $b_filePath`;
	int    $resol		= `intFieldGrp -q -v1 $b_resol`;
	int    $check		= `checkBoxGrp -q -v1 $c_verb`;
	
	string $sel[];
	
	
	// -- Launch main proc
	//
	$sel = `ls -sl`;
	
	print ("\/\/ CMD : A_bakeHairTubesMaps (`ls -sl`, \"" + $refMesh + "\", " + $minR + ", " + $maxR + ", " + $borderScl + ", \"" + $filePath + "\", " + $resol + ", " + $check + ") \n");
	
	// Turn Off undos temporarly in order to avoid undoing this proc (because it crashes maya...)
	undoInfo -stateWithoutFlush off;
	
	A_bakeHairTubesMaps($sel, $refMesh, $minR, $maxR, $borderScl, $filePath, $resol, $check);
	undoInfo -stateWithoutFlush on;
}



//-------------------------------------------------------------------------
// Procedure that calls the ABOUT window
//
//-------------------------------------------------------------------------
//
global proc AbakeHairTubesMapsAbout(string $version)
{
	string $winAbout = "win_AbakeHairTubesMaps_about";

	windowPref -enableAll false;

	if (`window -exists $winAbout`)
		deleteUI -window $winAbout;

	$winAbout =`window -title "About..."
		-iconName "About win_AbakeHairTubesMaps"
		-toolbox true
		-sizeable false
		-widthHeight 300 300
		-topEdge 256
		-leftEdge 512
		$winAbout`;

	columnLayout -adjustableColumn true;

		text -label "";
		text -label " Script    : AbakeHairTubesMaps" -align "left";
		text -label (" Version : "+ $version) -align "left";
		text -label " Creator : Ali" -align "left";
		text -label " Contact : chibi_ali@homtail.com" -align "left";
		text -label "";
		text -label "";
		text -label " Features : " -align "left";
		text -label "";
		text -label " Gets selected hairTUBES densityRatio/CutLength/Borders and bakes them into EMITTER's UVs" -align "left";
		text -label "";
		text -label " - Computes the Ratio between a selected TUBE's base and it's largest section" -align "left";
		text -label " - Remaps the Ratio between the min/max range" -align "left";
		text -label " - Match each TUBE with an EMITTER" -align "left";
		text -label " - Bakes the Ratios into a map based on EMITTER's UVs" -align "left";
		text -label " - Bakes also a CutLength map, Border map and RandomColor map " -align "left";
		text -label "";
		text -label " >> See script \"bl_createHairEmitter.mel\" for EMITTER's creation" -align "left";
		text -label "";

	windowPref -enableAll true;
	showWindow $winAbout;
}



//***********************************************************************************
//===================================================================================
//-----------------------------------------------------------------------------------
//-----------------------			UserInterface			-------------------------
//-----------------------------------------------------------------------------------
//===================================================================================
//***********************************************************************************

global proc AbakeHairTubesMaps()
{
	string $version = "v2.2";
	string $window = "win_AbakeHairTubesMaps";
	
	
	if (`window -ex $window`)
	{
		deleteUI -window $window;
	}
	
	// -- Uses windowPref command to keep Window's position and to reset it's size (like -rtf flag)
	//
	if (`windowPref -exists $window`)
	{
		int $winTopEdge  = `windowPref -q -topEdge $window`;
		int $winLeftEdge = `windowPref -q -leftEdge $window`;
		windowPref -remove $window;

		$window = `window 	-title 		("Bake HairTubes Maps " + $version)
							-topEdge 	$winTopEdge -leftEdge $winLeftEdge
							-iconName 	"AbakeHairTubesMaps"
							-width 		430
							-height 	250
							-sizeable	true
							$window`;
	}
	else
	{
		$window = `window 	-title 		("Bake HairTubes Maps " + $version)
							-iconName 	"AbakeHairTubesMaps"
							-width 		430
							-height 	250
							-sizeable	true
							$window`;
	}
	
	

	// -- Create a Form Layout to contain window's body
	//
	string $parentFrmLyt = `formLayout -numberOfDivisions 100 myFrmLyt`;
	
		// Create a Column Layout to contain the menu
		//
		string $parentCoLyt = `columnLayout -adjustableColumn true myCoLyt`;

			// Create a menu for the window
			//
			string $menuBarLayout = `menuBarLayout`;
			setParent ..;

			//separator -height 10 -style "none";
		
		setParent ..;
		
		
		// Body layout
		//
		//string $bodyLyt = `columnLayout -adjustableColumn true exCoLyt01`;
		string $bodyLyt = `scrollLayout -w 420 -h 230 bodyLyt01`;
		
			// Fields
			separator -height 10 -style "none";
			
			string $b_refMesh = `textFieldButtonGrp
								-l "Emitter Mesh"
								-ed 1
								-bl " Select "
								-cw 1 100
								-cw 3 55
								-adj 2
								-columnAttach 1 "left" 20
								-columnAttach 1 "right" 5
								-columnAttach 3 "left"  5
								-columnAttach 3 "right" 5
								-ann "the poly EMITTER on which Density/CutLength/Border/RandomColor maps will be baked"
								-bc "bHTD_getRefMesh"
								($window+"_refMesh")`;

			separator -height 10 -style "none";
			
			string $b_minR    = `floatFieldGrp
								-l "Min Range"
								-cw 1 100
								-cw 2 85
								-columnAttach 1 "left" 20
								-columnAttach 1 "right" 5
								-v1 0.1
								-ann "The minimum value (where lowest ratio will be remapped)"
								($window+"_minR")`;
			
			string $b_maxR    = `floatFieldGrp
								-l "Max Range"
								-cw 1 100
								-cw 2 85
								-columnAttach 1 "left" 20
								-columnAttach 1 "right" 5
								-v1 0.9
								-ann "The maximum value (where highest ratio will be remapped)"
								($window+"_maxR")`;
			
			string $b_bordS    = `floatFieldGrp
								-l "Border Scale"
								-cw 1 100
								-cw 2 85
								-columnAttach 1 "left" 20
								-columnAttach 1 "right" 5
								-v1 0.9
								-ann "Defines the border's thickness (ie. 0.9 = thin border / 0.1 = very thick )"
								($window+"_bordS")`;
			
			separator -height 10 -style "none";
			
			string $b_filePath = `textFieldButtonGrp
								-l "Map Directory"
								-ed 1
								-bl " Browse "
								-cw 1 100
								-cw 3 55
								-adj 2
								-columnAttach 1 "left" 20
								-columnAttach 1 "right" 5
								-columnAttach 3 "left"  5
								-columnAttach 3 "right" 5
								-bc "bHTD_getFilePath"
								-ann "The path of the directory where textures will be baked"
								($window+"_filePath")`;
			
			string $b_resol  = `intFieldGrp
								-l "Map Resolution"
								-cw 1 100
								-cw 2 85
								-columnAttach 1 "left" 20
								-columnAttach 1 "right" 5
								-v1 2048
								-ann "The texture's resolution"
								($window+"_resol")`;
		   
		   separator -height 10 -style "none";
		   
		   string $c_verb    = `checkBoxGrp
								-l1 "Verbose Mode"
								-v1 false
								-columnAttach 1 "left" 87
								-ann "Activate verbosity messages for checking"
								($window+"_verb")`;
		setParent ..;
		
		
		// Buttons
		//
		string $b_create = `button -label "Create" -w 150 -command "bHTD_apply" ($window+"_create")`;
		
		string $b_close = `button -label "Close" -w 150 -command ("deleteUI -window " + $window) ($window+"_close")`;

	setParent ..;
	
	
	
	// -- Edits the MAIN FORM layout
	//
	formLayout -edit
		-attachForm     $parentCoLyt	"top"     0
		-attachForm     $parentCoLyt	"left"    0
		-attachForm     $parentCoLyt	"right"   0
		
		-attachControl  $bodyLyt		"top" 	  0 $parentCoLyt
		-attachForm     $bodyLyt		"left"    5
		-attachForm     $bodyLyt		"right"   5
		-attachControl	 $bodyLyt		"bottom"  5 $b_create
		
		-attachNone		 $b_create    	"top" 	  
		-attachForm     $b_create	    "left"    5
		-attachPosition $b_create	    "right"   5 50
		-attachForm     $b_create	    "bottom"  5
		
		-attachNone		 $b_close    	"top" 	  
		-attachPosition $b_close	    "left"    5 50
		-attachForm     $b_close	    "right"   5
		-attachForm     $b_close	    "bottom"  5
		
	$parentFrmLyt;
	
	
	// -- Edits the window's menu
	//
	setParent $menuBarLayout;
		menu -label "Help" -helpMenu true;
			menuItem -label "About..." -c ("AbakeHairTubesMapsAbout \"" + $version + "\"") helpMit;
	
	
	// -- Launch the window
	//
	showWindow $window;
}

