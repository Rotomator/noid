//=============================================================================
//
//	Wrap Bands 2 Hairs	- Script that wraps Hairs (Nurbs TUBES/CURVES) to selected poly BANDS
//						- Get the list of the initial selected TUBES/CURVES
//						- Creates a proxy of the combined BANDS
//						- Separates the proxy
//						- Wraps the TUBES/CURVES on the BANDS
//
//-----------------------------------------------------------------------------
//
// Version  :    1.4
//
// Created  :    09/08/2010
// Modified :    06/09/2010
//
// Creator 	:    Ali
// Contact 	:    chibi_ali@hotmail.com
//
//-----------------------------------------------------------------------------
//
// Use		:	- use "AwrapBands2Hairs" to open the UI.
//
//-----------------------------------------------------------------------------------
//===================================================================================
//***********************************************************************************








//***********************************************************************************
//===================================================================================
//--------------------------------     Main Procs    --------------------------------
//===================================================================================
//***********************************************************************************


//-------------------------------------------------------------------------
//
// Procedure that separates and wraps polyBANDS on corresponding Hair TUBES/CURVES
//		<< takes for arg the combined polyBANDS mesh (that was generated by Hair TUBES/CURVES)
//		<< takes for arg the faloff mode of the wrap deformer : volume (0) or surface (1)
//		<< takes for arg a boolean to create (or not) a proxy btw. the wrap and intial Hair TUBE/CURVES
//
//		>> returns the list of the wrapped Hair TUBES/CURVES
//
//-------------------------------------------------------------------------

global proc string[] A_wrapBands2Hairs(string $resultBand, int $faloff, int $proxy)
{
	string $sel[];
	string $texWinName[];
	string $initSelOrderL;
	string $initSelOrder[];
	string $proxyGrp;
	string $resultBandPXY;
	string $combOrder[];
	string $tempArray[];
	string $initProxy;
	string $prxyBS[];
	string $wrapNode[];
	
	
	// ------------------------------------------------------------
	// -- Check that argument is a poly and has a "combineOrder" extraAttr
	//
	if ( $resultBand == "" )
	{
        error "Please select one Poly BAND surface as source !";
	}
	else
	{
		$sel = `filterExpand -fullPath false -sm 12 $resultBand`;
		
		if (!`size($sel)`)
		{
			error ("The source object must be a POLYGONAL object !");
		}
		
		$resultBand = $sel[0]; // get the transform even if $resultBand was a shape
	}
	
	
	if (!`attributeExists "combineOrder" $resultBand`)
	{
		error ("The source object must have a \"combineOrder\" extra attribute !");
	}
	
	
	// Accept only 0 or 1 for the faloff mode : volume (0) or surface (1)
	if ($faloff < 0 || $faloff > 1)
	{
		$faloff = 1;
	}
	
	
	// ------------------------------------------------------------
	// -- Close UVTexture Editor if open (really really faster!)
	//
	$texWinName = `getPanel -sty polyTexturePlacementPanel`;
	// disable it if it's in embedded in a layout (like perspView)
	removeTextureWindow $texWinName[0];
	
	// close it if it's a separate window
	if ( `window -exists polyTexturePlacementPanel1Window` ) {
		deleteUI -window polyTexturePlacementPanel1Window;
	}
	
	
	// ------------------------------------------------------------
	// -- Get the list and order of the inital selected objects (the TUBES/CURVES that generated the bands)
	//
	$initSelOrderL = `getAttr ($resultBand + ".combineOrder")`;
	$initSelOrder = stringToStringArray($initSelOrderL, " ");
	
	
	// ------------------------------------------------------------
	// -- Remove any existing nameSpace
	//
	if (`gmatch $resultBand "*:*"`) {
		$resultBandPXY = `substitute "^[^.]*:" $resultBand ""`;
	}
	else {
		$resultBandPXY = $resultBand;
	}
	
	
	// ------------------------------------------------------------
	// -- Create a proxy of the polyBANDS and separate it
	//
	$proxyGrp = `createNode transform -n ($resultBandPXY + "_PXY_Grp")`;
	$resultBandPXY = `createNode transform -p $proxyGrp -n ($resultBandPXY + "_PXY")`;
	createNode mesh -p $resultBandPXY -n ($resultBandPXY + "_PXYShape");
	sets -e -forceElement initialShadingGroup $resultBandPXY;
	connectAttr -f ($resultBand + ".outMesh") ($resultBandPXY + ".inMesh");
	setAttr ($proxyGrp + ".visibility") 0;
	
	// Separate the polyBANDS only if it has more than more than 1 initial Hair TUBES/CURVES
	if (`size $initSelOrder` == 1) {
		$combOrder[0] = $resultBandPXY;
	}
	else {
		$combOrder = `polySeparate -ch 1 $resultBandPXY`;
	}
	
	
	// ------------------------------------------------------------
	// -- Wrap the initial TUBES/CURVES (or a proxy) on the corresponding polyBANDS
	//
	for ($i=0; $i<size($initSelOrder); $i++)
	{
		$combOrder[$i] = `rename $combOrder[$i] ($resultBandPXY + "_#")`;
		
		if ($proxy == 1)
		{
			// Create a proxy of the initial Hair
			$tempArray = A_dupliObj( {$initSelOrder[$i]} );
			$initProxy = `substitute "_frm.*" $tempArray[0] ""`;
			$initProxy = `rename $tempArray[0] ($initProxy + "_PXY")`;
			parent $initProxy $proxyGrp;
			
			// Do a blendShape between proxy and initial Hair
			$prxyBS = `blendShape -n "blendShape_wrapB2H_#" -before $initProxy $initSelOrder[$i]`;
			setAttr ($prxyBS[0] + ".w[0]") 1;
		}
		else
		{
			$initProxy = $initSelOrder[$i];
		}
		
		select -r $initProxy $combOrder[$i];
		$wrapNode = `doWrapArgList "7" { "1","0","1", "2", "1", "1", "0", $faloff }`; // in exclusive bind
		rename $wrapNode[0] ("wrap_" + $combOrder[$i]);
	}
	
	
	select -cl;
	return $initSelOrder;
}




//***********************************************************************************
//===================================================================================
//--------------------------------     Call Procs    --------------------------------
//===================================================================================
//***********************************************************************************



//-------------------------------------------------------------------------
// Procedure that gets the selected mesh
//
//-------------------------------------------------------------------------
//
global proc wB2T_getRefMesh()
{
	string $window 		= "win_AwrapBands2Hairs";
	string $b_refMesh	= ($window+"_refMesh");
	string $b_tubL		= ($window+"_tubL");
	string $sel[];
	string $hairL;
	
	
	// ------------------------------------------------------------
	// -- Get the selected mesh
	//
	$sel = `filterExpand -fullPath false -sm 12 (ls ("-sl"))`;
	
    if (!`size($sel)`)
	{
        error "Please select one POLYGONAL Object !";
	}
	
	textFieldButtonGrp -e -tx $sel[0] $b_refMesh;
	
	
	// ------------------------------------------------------------
	// -- Get the List of the initial selected TUBES/CURVES
	//
	if (!`attributeExists "combineOrder" $sel[0]`)
	{
		textFieldButtonGrp -e -tx "" $b_tubL;
		error ("The source object must have a \"combineOrder\" extra attribute !");
	}
	
	$hairL = `getAttr ($sel[0] + ".combineOrder")`;
	textFieldButtonGrp -e -tx $hairL $b_tubL;
}



//-------------------------------------------------------------------------
// Procedure that selects the nurbs Hairs
//
//-------------------------------------------------------------------------
//
global proc wB2T_viewTubL()
{
	string $window 		= "win_AwrapBands2Hairs";
	string $b_tubL		= ($window+"_tubL");
	string $hairL;
	string $hairArray[];
	
	
	$hairL = `	textFieldButtonGrp -q -tx $b_tubL`;
	
	if ($hairL != "")
	{
		$hairArray = stringToStringArray($hairL, " ");
		select -r $hairArray;
	}
	else
	{
		warning ("No initial Nurbs TUBES/CURVES found, check that you've selected a correctly generated polyBANDS mesh ! ");
	}
}



//-------------------------------------------------------------------------
// Procedure that LAUNCHES the script when hitting "CREATE" button
//
//-------------------------------------------------------------------------
//
global proc wB2T_apply()
{
	string $window		= "win_AwrapBands2Hairs";
	string $b_refMesh	= ($window+"_refMesh");
	string $m_faloff	= ($window+"_faloff");
	string $c_prxy		= ($window+"_prxy");
	
	string $refMesh 	= `textFieldButtonGrp -q -tx $b_refMesh`;
	string $menuVal		= `optionMenuGrp -q -v $m_faloff`;
	int    $prxyVal		= `checkBoxGrp -q -v1 $c_prxy`;
	int    $faloff;
	
	
	// -- Launch main proc
	//
	if ($menuVal == "Volume") {
		$faloff = 0;
	}
	else {
		$faloff = 1;
	}
	
	print ("\/\/ CMD : A_wrapBands2Hairs (\"" + $refMesh + "\", " + $faloff + ", " + $prxyVal + ") \n");
	A_wrapBands2Hairs($refMesh, $faloff, $prxyVal);
}



//-------------------------------------------------------------------------
// Procedure that calls the ABOUT window
//
//-------------------------------------------------------------------------
//
global proc AwrapBands2HairsAbout(string $version)
{
	string $winAbout = "win_AwrapBands2Hairs_about";

	windowPref -enableAll false;

	if (`window -exists $winAbout`)
		deleteUI -window $winAbout;

	$winAbout =`window -title "About..."
		-iconName "About win_AwrapBands2Hairs"
		-toolbox true
		-sizeable false
		-widthHeight 300 300
		-topEdge 256
		-leftEdge 512
		$winAbout`;

	columnLayout -adjustableColumn true;

		text -label "";
		text -label " Script    : AwrapBands2Hairs" -align "left";
		text -label (" Version : "+ $version) -align "left";
		text -label " Creator : Ali" -align "left";
		text -label " Contact : chibi_ali@homtail.com" -align "left";
		text -label "";
		text -label "";
		text -label " Features : " -align "left";
		text -label "";
		text -label " Script that wraps Hairs (Nurbs TUBES/CURVES) to selected poly BANDS" -align "left";
		text -label "";
		text -label " - Get the list of the initial selected TUBES/CURVES" -align "left";
		text -label " - Creates a proxy of the combined BANDS" -align "left";
		text -label " - Separates the BANDS proxy" -align "left";
		text -label " - Wraps each TUBE (or a proxy) on corresponding BAND" -align "left";
		text -label "";

	windowPref -enableAll true;
	showWindow $winAbout;
}



//***********************************************************************************
//===================================================================================
//-----------------------------------------------------------------------------------
//-----------------------			UserInterface			-------------------------
//-----------------------------------------------------------------------------------
//===================================================================================
//***********************************************************************************

global proc AwrapBands2Hairs()
{
	string $version = "v1.4";
	string $window = "win_AwrapBands2Hairs";
	
	
	if (`window -ex $window`)
	{
		deleteUI -window $window;
	}
	
	// -- Uses windowPref command to keep Window's position and to reset it's size (like -rtf flag)
	//
	if (`windowPref -exists $window`)
	{
		int $winTopEdge  = `windowPref -q -topEdge $window`;
		int $winLeftEdge = `windowPref -q -leftEdge $window`;
		windowPref -remove $window;

		$window = `window 	-title 		("Wrap Bands 2 Hairs " + $version)
							-topEdge 	$winTopEdge -leftEdge $winLeftEdge
							-iconName 	"AwrapBands2Hairs"
							-width 		430
							-height 	230
							-sizeable	true
							$window`;
	}
	else
	{
		$window = `window 	-title 		("Wrap Bands 2 Hairs " + $version)
							-iconName 	"AwrapBands2Hairs"
							-width 		430
							-height 	230
							-sizeable	true
							$window`;
	}
	
	

	// -- Create a Form Layout to contain window's body
	//
	string $parentFrmLyt = `formLayout -numberOfDivisions 100 myFrmLyt`;
	
		// Create a Column Layout to contain the menu
		//
		string $parentCoLyt = `columnLayout -adjustableColumn true myCoLyt`;

			// Create a menu for the window
			//
			string $menuBarLayout = `menuBarLayout`;
			setParent ..;

			//separator -height 10 -style "none";
		
		setParent ..;
		
		
		// Body layout
		//
		//string $bodyLyt = `columnLayout -adjustableColumn true exCoLyt01`;
		string $bodyLyt = `scrollLayout -w 420 -h 200 bodyLyt01`;
		
			// Fields
			separator -height 10 -style "none";
			
			string $b_refMesh = `textFieldButtonGrp
								-l "Reference Mesh"
								-ed 1
								-bl " Select "
								-cw 1 100
								-cw 3 55
								-adj 2
								-columnAttach 1 "left" 20
								-columnAttach 1 "right" 5
								-columnAttach 3 "left"  5
								-columnAttach 3 "right" 5
								-ann "The combined polyBANDS mesh (that was generated by Hair TUBES/CURVES)"
								-bc "wB2T_getRefMesh"
								($window+"_refMesh")`;
			
			string $m_faloff  = `optionMenuGrp
								-l "Faloff Mode"
								-cw 1 100
								-cw 2 85
								-columnAttach 1 "left" 20
								-columnAttach 1 "right" 5
								-ann "Sets the wrap deformer to use direct (volume) or surface-based (surface) distances to calculate the weights"
								($window+"_faloff")`;
			
			menuItem -label "Surface";
			menuItem -label "Volume";
			
			separator -height 10 -style "none";
			
			string $c_prxy    = `checkBoxGrp
								-l1 "Create Proxy"
								-v1 false
								-columnAttach 1 "left" 100
								-ann "Creates a proxy between the wrap and the initial Hair TUBES/CURVES"
								($window+"_prxy")`;
			
			separator -height 10 -style "none";
			separator -height 10 -style "none";
			
			string $b_tubL    = `textFieldButtonGrp
								-l "Hairs to Wrap"
								-ed 0
								-bl " View "
								-cw 1 100
								-cw 3 55
								-adj 2
								-columnAttach 1 "left" 20
								-columnAttach 1 "right" 5
								-columnAttach 3 "left"  5
								-columnAttach 3 "right" 5
								-tx "Hair TUBES/CURVES that will be wrapped"
								-ann "The list of the Hair TUBES/CURVES that will be wrapped"
								-bc "wB2T_viewTubL"
								($window+"_tubL")`;
			
		setParent ..;
		
		
		// Buttons
		//
		string $b_create = `button -label "Create" -w 150 -command "wB2T_apply" ($window+"_create")`;
		
		string $b_close = `button -label "Close" -w 150 -command ("deleteUI -window " + $window) ($window+"_close")`;

	setParent ..;
	
	
	
	// -- Edits the MAIN FORM layout
	//
	formLayout -edit
		-attachForm     $parentCoLyt	"top"     0
		-attachForm     $parentCoLyt	"left"    0
		-attachForm     $parentCoLyt	"right"   0
		
		-attachControl  $bodyLyt		"top" 	  0 $parentCoLyt
		-attachForm     $bodyLyt		"left"    5
		-attachForm     $bodyLyt		"right"   5
		-attachControl	 $bodyLyt		"bottom"  5 $b_create
		
		-attachNone		 $b_create    	"top" 	  
		-attachForm     $b_create	    "left"    5
		-attachPosition $b_create	    "right"   5 50
		-attachForm     $b_create	    "bottom"  5
		
		-attachNone		 $b_close    	"top" 	  
		-attachPosition $b_close	    "left"    5 50
		-attachForm     $b_close	    "right"   5
		-attachForm     $b_close	    "bottom"  5
		
	$parentFrmLyt;
	
	
	// -- Edits the window's menu
	//
	setParent $menuBarLayout;
		menu -label "Help" -helpMenu true;
			menuItem -label "About..." -c ("AwrapBands2HairsAbout \"" + $version + "\"") helpMit;
	
	
	// -- Launch the window
	//
	showWindow $window;
}

